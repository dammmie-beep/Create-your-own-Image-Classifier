# -*- coding: utf-8 -*-
"""predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jI_EFWb8IIOGG5jufFGX4_UuAtviV9EY
"""

import numpy as np
import argparse
import torch
from torch import nn, optim
import torchvision
import torchvision.transforms as transforms
import torchvision.datasets as datasets
import torchvision.models as models
from torch.autograd import Variable
from collections import OrderedDict
import matplotlib.pyplot as plt
import json
from PIL import Image
import utils
import model_data
import train

def main():
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Parser for predict.py')
    parser.add_argument('input', default='./flowers/test/1/image_06752.jpg', nargs='?', type=str)
    parser.add_argument('--data_dir', action="store", default="./flowers/")
    parser.add_argument('checkpoint', default='./checkpoint.pth', nargs='?', type=str)
    parser.add_argument('--top_k', dest="top_k", default=5, type=int)
    parser.add_argument('--category_names', dest="category_names", default='cat_to_name.json')
    parser.add_argument('--gpu', default="gpu", dest="gpu")

    args = parser.parse_args()

    # Load the model from checkpoint
    model_checkpoint = model_data.loaded_model(args.checkpoint)

    device = torch.device("cuda:0" if torch.cuda.is_available() and args.gpu == 'gpu' else "cpu")

    # Load category names
    with open(args.category_names, 'r') as json_file:
        cat_to_name = json.load(json_file, strict = False)

    # Make prediction
    probabilities, classes = model_data.predict(args.input, model_checkpoint, args.top_k, device)

    # Display results
    for probability, class_idx in zip(probabilities, classes):
        label = cat_to_name[str(class_idx)]
        print(f"{label} with a probability of {probability}")

if __name__ == "__main__":
    main()